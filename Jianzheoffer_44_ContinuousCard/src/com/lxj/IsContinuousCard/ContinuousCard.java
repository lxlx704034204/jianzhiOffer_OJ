package com.lxj.IsContinuousCard;
/**
 * LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...他随机从中抽出了5张牌,想测测自己的手气,
 * 看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,
 * 他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),
 * “So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。
 * @author linxj
 *
 */
public class ContinuousCard {
	public static void main(String[] args) {
		int[] array = {1,3,2,5,4};
		System.out.print(isContinuous(array));
	}
	public static boolean isContinuous(int [] numbers) {
		//1、排序
				//2、有重复数字，肯定不是顺子
				//3、相邻数字之间个数需要0的个数
				//4、总共0的个数小于需要的个数，则不是顺子
		int numberOfZeros = 0;
		int numberOfGap = 0;
		if(numbers==null || numbers.length==0)
			return false;
		insert(numbers);
		for(int i = 0;i < numbers.length;i++){
			if(numbers[i] == 0){
				numberOfZeros++;
			}
		}
		int small = numberOfZeros;//取出最小的数
		int big = small + 1;//最大数
		while(big < numbers.length){
			if(numbers[small] == numbers[big])//有对子
				return false;
			numberOfGap += numbers[big] - numbers[small] - 1;
			small = big;
			++big;
		}
		return (numberOfGap > numberOfZeros)?false:true;
    }
	private static int[] insert(int[] array) {
		int outer, inner;
		for(outer=0; outer<array.length; outer++){
			int temp = array[outer];//记录当前元素的值，而不是位置，因为当前位置上的数据可能会被交换数值
			inner = outer;
			while(inner>0 && array[inner-1]>temp){//inner>0必须在temp < array[inner-1]前面
				//还没找到位置，指针向前走
				array[inner] = array[inner-1];//会一直交换
				inner--;
			}
			array[inner] = temp;
		}
		return array;
	}
}
